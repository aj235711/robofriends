{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","Cardlist","cardsList","robots","map","user","i","key","Searchbox","change","type","placeholder","onChange","Scroll","style","overflowY","border","margin","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAaeA,EAXF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACC,yBAAKC,UAAY,0EAChB,yBAAKC,IAAM,UAAUC,IAAG,+BAA4BL,EAA5B,mBACxB,4BAAKC,GACL,2BAAIC,KCSQI,EAbE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACMC,KAAI,SAACC,EAAMC,GAAO,IAClCX,EAAmBU,EAAnBV,GAAIC,EAAeS,EAAfT,KAAMC,EAASQ,EAATR,MAClB,OAAO,kBAAC,EAAD,CAAMU,IAAOD,EAAGX,GAAMA,EAAIC,KAAQA,EAAMC,MAASA,OAGzD,OACC,6BACEK,ICAWM,G,MATG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OACC,6BACC,2BAAOX,UAAY,gDAAgDY,KAAO,SAASC,YAAc,qBAAqBC,SAAaH,OCIvHI,G,MARA,SAACnB,GACf,OACC,yBAAKoB,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,OAAQC,OAAQ,SACrFxB,EAAMyB,YCwCKC,E,kDAtCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACZxB,OAAQ,GACRqB,YAAa,IAJD,E,gEAQO,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAO9B,IAAD,EACwBC,KAAKN,MAA7BxB,EADA,EACAA,OAAQqB,EADR,EACQA,YACVU,EAAiB/B,EAAOgC,QAAO,SAAA9B,GAAI,OAAIA,EAAKT,KAAKwC,cAAcC,SAASb,EAAYY,kBAC1F,OAAIjC,EAAOmC,OAKT,yBAAKxC,UAAY,MAChB,wBAAIgB,MAAS,CAACyB,SAAU,UAAxB,eACA,kBAAC,EAAD,CAAW9B,OAAUwB,KAAKZ,iBAC1B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAU+B,MARhB,2C,GAvBQM,a,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc537fbc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst { id, name, email } = props;\r\n\treturn(\r\n\t\t<div className = \"bg-light-green tc dib br2 pa3 ma3 b-solid bw3 b--red grow bw2 shadow-3\">\r\n\t\t\t<img alt = \"loading\" src = {`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<h3>{name}</h3>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({ robots }) => {\r\n\tconst cardsList = robots.map((user, i) => {\r\n\t\tconst { id, name, email} = user;\r\n\t\treturn <Card key = {i} id = {id} name = {name} email = {email} />\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardsList}\r\n\t\t</div>\r\n\t);\r\n} \r\n\r\nexport default Cardlist;","import React from 'react';\r\nimport './Searchbox.css';\r\n\r\nconst Searchbox = ({ change }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input className = \"tc pa3 ba b--green nooutline bg-lightest-blue\" type = \"search\" placeholder = \"Search your robots\" onChange = { change } />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style = {{overflowY: 'scroll', border: '2px solid black', margin: '10px', height: '70vh'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: '',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users }));\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value });\r\n\t} \r\n\t\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(user => user.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n\t\tif(!robots.length) {\r\n\t\t\treturn <h1>LOADING</h1>\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<div className = \"tc\">\r\n\t\t\t\t\t<h1 style = {{fontSize: '4.5vh'}}>ROBOFRIENDS</h1>\r\n\t\t\t\t\t<Searchbox change = {this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<Cardlist robots = {filteredRobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\n// import robots from './robots';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// const { id, name, email } = robots;\r\n\r\nReactDOM.render(<App /> , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}